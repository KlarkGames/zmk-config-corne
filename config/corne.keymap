/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_par {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        left_bracket {
            bindings = <&unicode_left_bracket>;
            key-positions = <16 17>;
        };

        left_brace {
            bindings = <&unicode_left_brace>;
            key-positions = <28 29>;
        };

        right_par {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 6>;
            timeout-ms = <50>;
        };

        right_bracket {
            bindings = <&unicode_right_bracket>;
            key-positions = <19 18>;
        };

        right_brace {
            bindings = <&unicode_right_brace>;
            key-positions = <31 30>;
        };

        dot {
            bindings = <&unicode_dot>;
            key-positions = <>;
        };

        comma {
            bindings = <&unicode_comma>;
            key-positions = <>;
        };

        colon {
            bindings = <&unicode_colon>;
            key-positions = <>;
        };

        semicolon {
            bindings = <&unicode_semicolon>;
            key-positions = <>;
        };

        question_mark {
            bindings = <&unicode_question_mark>;
            key-positions = <>;
        };

        exclamation_mark {
            bindings = <&unicode_exclamation_mark>;
            key-positions = <>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        tap_or_mo: tap_or_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_OR_MO";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        win_change_language: win_change_language {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_CHANGE_LANGUAGE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_WIN>, <&kp LG(SPACE)>;

            tapping-term-ms = <200>;
        };

        backspace_del: backspace_del {
            compatible = "zmk,behavior-tap-dance";
            label = "BACKSPACE_DEL";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            tapping-term-ms = <150>;
        };
    };

    macros {
        unicode_dot: unicode_symbols {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N4 &kp KP_N6 &kt LEFT_ALT>;
            label = "UNICODE_SYMBOLS";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_comma: unicode_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N4 &kp KP_N4 &kt LEFT_ALT>;
            label = "UNICODE_COMMA";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_semicolon: unicode_semicolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N5 &kp KP_N9 &kt LEFT_ALT>;
            label = "UNICODE_SEMICOLON";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_colon: unicode_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N5 &kp KP_N8 &kt LEFT_ALT>;
            label = "UNICODE_COLON";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_left_bracket: unicode_left_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N9 &kp KP_N1 &kt LEFT_ALT>;
            label = "UNICODE_LEFT_BRACKET";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_right_bracket: unicode_right_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N9 &kp KP_N3 &kt LEFT_ALT>;
            label = "UNICODE_RIGHT_BRACKET";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_right_brace: unicode_right_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N5 &kt LEFT_ALT>;
            label = "UNICODE_RIGHT_BRACE";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_left_brace: unicode_left_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N3 &kt LEFT_ALT>;
            label = "UNICODE_LEFT_BRACE";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_question_mark: unicode_question_mark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N6 &kp KP_N3 &kt LEFT_ALT>;
            label = "UNICODE_QUESTION_MARK";
            tap-ms = <10>;
            wait-ms = <10>;
        };

        unicode_exclamation_mark: unicode_exclamation_mark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_ALT &kp KP_N0 &kp KP_N0 &kp KP_N3 &kp KP_N3 &kt LEFT_ALT>;
            label = "UNICODE_EXCLAMATION_MARK";
            tap-ms = <10>;
            wait-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC    &kp Q  &kp W  &kp E      &kp R         &kp T                 &kp Y             &kp U          &kp I                 &kp O    &kp P      &kp LEFT_BRACKET
&kp TAB    &kp A  &kp S  &kp D      &kp F         &kp G                 &kp H             &kp J          &kp K                 &kp L    &kp SEMI   &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V         &kp B                 &kp N             &kp M          &kp COMMA             &kp DOT  &kp SLASH  &kp RIGHT_BRACKET
                         &kp LCTRL  &kp LEFT_ALT  &tap_or_mo 2 SPACE    &tap_or_mo 1 RET  &kp BACKSPACE  &win_change_language
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1  &kp F2        &kp F3        &kp F4        &kp F5      &kp F6    &kp F7    &kp F8    &kp F9  &kp F10    &kp F11  &kp F12
&none   &none         &none         &none         &none       &none     &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none    &none
&none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &none     &none     &none     &none   &none      &none    &none
                                    &none         &none       &none     &none     &none     &none
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp NUMBER_6          &kp N7          &kp N8                  &kp N9         &kp N0            &kp DEL
&kp TAB     &none            &none         &kp MINUS     &kp EQUAL     &kp SLASH      &kp NON_US_BACKSLASH  &kp SQT         &kp SEMICOLON           &none          &kp TILDE         &kp HOME
&kp LSHFT   &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET             &kp AMPERSAND   &kp ASTERISK            &kp LESS_THAN  &kp GREATER_THAN  &kp END
                                           &none         &none         &none          &unicode_dot          &unicode_comma  &unicode_question_mark
            >;
        };
    };
};
